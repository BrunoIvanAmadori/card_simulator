{"version":3,"sources":["assets/core2.ts"],"names":[],"mappings":"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","file":"core2.js","sourceRoot":"..","sourcesContent":["var cardId = 0;\r\nvar deckId = 0;\r\nvar handId = 0;\r\n\r\n//Card : lo que compone los pilones. Hay tipos de cartas. Se pueden repetir. Tienen ID único por creación y tienen posicion en el pilon,\r\n\r\n//CardType : Es el tipo de carta. Varias cartas pueden ser la misma carta repetida.\r\n//CardPile : contine las caracteristicas generales de un pilon de cartas. Tiene X cantidad, se puede mezclar y reordenar.\r\n\r\n//Deck : Es un pilon, pero de 60 cartas, que se reparten 7 al principio a la Hand y una por turno. Además pertenece a un jugador.\r\n\r\n//Hand : Es un pilón, pero de 7 cartas iniciales, que son obtenidas al principio y una por turno. Pertenecen a un jugador. El jugador puede tirar las que quiera cada turno, siempre y cuando las reglas lo permitan.\r\n\r\n\r\n\r\n//Falta que me construya un deck con n cartas a partir de una lista con n cartas. Averiguar API.\r\n//Luego, de ese deck, puedo repartir 7 cartas a la mano\r\n//De la mano las puedo reordenar, o tirarlas al campo de juego\r\n\r\n// Carga el mazo seleccionado\r\n\r\nvar fileInput:any = document.querySelector('#file-input');\r\n\r\ndocument.getElementById('read-button').addEventListener('click', () =>\r\n  loadDeck(fileInput, txt => fetchCardList(newDeckList(txt)))\r\n)\r\n\r\nasync function fetchCardList(list) {\r\n  const cardList = list;\r\n  const cardListKeys = Object.keys(this.deckCardList);\r\n  const cardListNames = cardListKeys.map((key) => cardList[key].name);\r\n  const cardListPromises:object = cardListNames.map(card => getCard(card));\r\n  const cardListCards = Promise.all(cardListPromises);\r\n  const deckCardObject = await cardListCards;\r\n\r\n  return deckCardObject;\r\n}\r\n\r\nfunction newDeckList(txt:string){\r\n      let lines = this.txt.split(\"\\n\");\r\n      let numLines = lines.length;\r\n      let cardList = [];\r\n      let idcount = 0;\r\n\r\n      // parse\r\n      for ( let i = 0 ; i < numLines ; i++ ) {\r\n        let line = lines[i];\r\n\r\n        if ( !((line.indexOf('/') == 0) || (line.indexOf(' ') == -1) || (line.indexOf('SB:') == 0)) )\r\n        {\r\n          let qty = line.match(/\\d+/);\r\n          let name = line.match(/\\D+/);\r\n\r\n          for ( let d = 0 ; d < qty[0] ; d++ ){\r\n            cardList[ idcount++ ] = {\r\n              'name': name[ 0 ].slice( 1 )\r\n            }\r\n          } //endfor\r\n        } //endif\r\n      }\r\n\r\n      return cardList;\r\n    }\r\n\r\n\r\n\r\nfunction loadDeck(fileInput, cb){\r\n  let file = fileInput.files[0];\r\n       const reader = new FileReader();\r\n       reader.readAsText(file);\r\n       reader.onload = readSuccess;\r\n       function readSuccess(evt) {\r\n         cb(evt.target.result);\r\n     }\r\n}\r\n\r\nasync function getCard(named:string) {\r\n  let url = `https://api.scryfall.com/cards/named?exact=${named}`;\r\n  const response = await fetch(url);\r\n  const data = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\n\r\n getCard('Martyr+of+Dusk')\r\n   .then((card) => {\r\n     displayCard(getCardImageUri(card, 'normal'))\r\n   }\r\n );\r\n\r\nfunction getCardImageUri(object:object, size:string){\r\n   return object['image_uris'][size];\r\n}\r\n\r\nfunction displayCard(source) {\r\n  let img = document.createElement('img');\r\n  document.querySelector(\".card\").appendChild(img);\r\n  img.src = source;\r\n  //getCardImageUri(getCard()).then()\r\n}\r\n\r\n//\r\n//\r\n//\r\n// function newId( type:any ) {\r\n//   switch (type) {\r\n//     case Card:\r\n//       cardId++;\r\n//         return cardId;\r\n//     case Deck:\r\n//     deckId++;\r\n//         return deckId;\r\n//     case Hand:\r\n//     handId++;\r\n//       return handId;\r\n//   }\r\n// }\r\n\r\n// class CardPile {\r\n//   constructor (qty:number, max:number) {\r\n//     let numberOfCards:number = qty;\r\n//     let maxCards:number = max;\r\n//   }\r\n// }\r\n\r\nfunction counter(b:number) {\r\n  let a = 0;\r\n  () =>\r\n    { return a + b;\r\n  }\r\n}\r\n\r\n\r\nclass Deck {\r\n\r\n  deckTxt:string;\r\n  deckCardList:Array<Object>;\r\n  deckCardObject:Promise<Object>;\r\n\r\n\r\n  constructor(fileTxt:string, name:string) {\r\n    this.deckTxt = fileTxt;\r\n    // this.deckName = name;\r\n    this.deckCardList = this.createCardListFromTxt();\r\n    this.fetchCardList();\r\n    // this.newDeck()\r\n  }\r\n\r\n\r\n  async fetchCardList() {\r\n    const cardList = this.deckCardList;\r\n    const cardListKeys = Object.keys(this.deckCardList);\r\n    const cardListNames = cardListKeys.map((key) => cardList[key].name);\r\n    const cardListPromises:object = cardListNames.map(card => getCard(card));\r\n    const cardListCards = Promise.all(cardListPromises);\r\n    this.deckCardObject = await cardListCards;\r\n    console.log(this.deckCardObject);\r\n    return this.deckCardObject;\r\n\r\n  }\r\n\r\n  createCardListFromTxt():Array<string> {\r\n      let lines = this.deckTxt.split(\"\\n\");\r\n      let numLines = lines.length;\r\n      let cardList = [];\r\n      let idcount = 0;\r\n\r\n      // parse\r\n      for ( let i = 0 ; i < numLines ; i++ ) {\r\n        let line = lines[i];\r\n\r\n        if ( !((line.indexOf('/') == 0) || (line.indexOf(' ') == -1) || (line.indexOf('SB:') == 0)) )\r\n        {\r\n          let qty = line.match(/\\d+/);\r\n          let name = line.match(/\\D+/);\r\n\r\n          for ( let d = 0 ; d < qty[0] ; d++ ){\r\n            cardList[ idcount++ ] = {\r\n              'name': name[ 0 ].slice( 1 )\r\n            }\r\n          } //endfor\r\n        } //endif\r\n      }\r\n\r\n      return cardList;\r\n    }\r\n}\r\n\r\n\r\nclass Hand {\r\n  constructor (id:number, name:string) {\r\n    let cardId:number = id;\r\n    let handName:string = name;\r\n  }\r\n}\r\n\r\nclass Card {\r\n  constructor (name:string) {\r\n    cardId = newId(Card);\r\n    let cardName:string = name;\r\n\r\n    console.log(`Card ${cardId} with name \"${cardName}\" has been created.`);\r\n  }\r\n}\r\n\r\n// const deck01 = new Deck(30);\r\n//\r\n// const card02 = new Card('pepito');\r\n// const card03 = new Card('pepito');\r\n"]}